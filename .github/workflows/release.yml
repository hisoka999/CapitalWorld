name: release
on:
  push:
    tags:
      - '*'
jobs:
  job:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows (x64)
            os: windows-latest
            triplet: x64-windows
            arch: x64
            experimental: false
          - name: Windows (x86)
            os: windows-latest
            triplet: x86-windows
            experimental: false
            arch: Win32
          - name: Ubuntu (GCC)
            os: ubuntu-latest
            triplet: x64-linux
            cc: gcc
            cxx: g++
            arch: amd64
            experimental: false

    env:
      # Indicates the CMake build directory where project files and binaries are being produced.
      CMAKE_BUILD_DIR: ${{ github.workspace }}/build/
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      #VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsdl2-dev libsdl2-ttf-dev libsdl2-gfx-dev libsdl2-image-dev libsdl2-mixer-dev
        if: matrix.os == 'ubuntu-latest'

      - name: Show content of workspace after cache has been restored
        run: find $RUNNER_WORKSPACE
        shell: bash

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1
        with:
              arch: ${{ matrix.arch }}
        if: matrix.os == 'windows-latest'

      # Run CMake to generate Ninja project files, using the vcpkg's toolchain file to resolve and install the dependencies as specified in vcpkg.json.
      - name: Install dependencies and generate project files (Linux)
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -B "${{ env.CMAKE_BUILD_DIR }}"
        if: matrix.os == 'ubuntu-latest'
      - name: Install dependencies and generate project files (Windows)
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -B "${{ env.CMAKE_BUILD_DIR }}"  -A ${{matrix.arch}}
        if: matrix.os == 'windows-latest'
      # Build the whole project with Ninja (which is spawn by CMake).
      - name: Build
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}" --target CapitalWorld
      - name: version linux
        run: echo "::set-output name=version::$(/${{ env.CMAKE_BUILD_DIR }}/CapitalWorld --version)"
        id: version-linux
        if: matrix.os == 'ubuntu-latest'
      - name: version windows
        run: echo "::set-output name=version::$(\${{ env.CMAKE_BUILD_DIR }}\CapitalWorld.exe --version)"
        id: version-windows
        if: matrix.os == 'windows-latest'
      - name: Build Packages
        run: |
          cd ${{ env.CMAKE_BUILD_DIR }}
          make package
      - name: upload linux artifact 
        uses: softprops/action-gh-release@v1
        with:
          files: |
              ${{ env.CMAKE_BUILD_DIR }}/CapitalWorld-${{ steps.version-linux.outputs.version }}-Linux.deb
              ${{ env.CMAKE_BUILD_DIR }}/CapitalWorld-${{ steps.version-linux.outputs.version }}-Linux.tar.gz
          token: ${{ github.token }}
        env:
          GITHUB_REPOSITORY: hisoka999/CapitalWorld
        if: matrix.os == 'ubuntu-latest'
      - name: upload windows artifact (zip)
        with:
          files: ${{ env.CMAKE_BUILD_DIR }}/CapitalWorld-${{ steps.version-windows.outputs.version }}-Windows.zip
          token: ${{ github.token }}
        env:
          GITHUB_REPOSITORY: hisoka999/CapitalWorld
        if: matrix.os == 'windows-latest'

